{"/home/travis/build/npmtest/node-npmtest-enchilada/test.js":"/* istanbul instrument in package npmtest_enchilada */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enchilada/lib.npmtest_enchilada.js":"/* istanbul instrument in package npmtest_enchilada */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_enchilada = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_enchilada = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-enchilada/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-enchilada && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_enchilada */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_enchilada\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_enchilada.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_enchilada.rollup.js'] =\n            local.assetsDict['/assets.npmtest_enchilada.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_enchilada.__dirname + '/lib.npmtest_enchilada.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enchilada/node_modules/enchilada/index.js":"var path = require('path');\nvar fs = require('fs');\nvar url = require('url');\nvar crypto = require('crypto');\nvar convert = require('convert-source-map');\nvar Ready = require('ready-signal');\n\nvar mime = require('mime');\nvar uglifyjs = require('uglify-js');\nvar browserify = require('browserify');\nvar debug = require('debug')('enchilada');\n\nvar filewatcher = require('filewatcher');\n\nuglifyjs.AST_Node.warn_function = function(msg) {\n    debug('warn: %s', msg);\n};\n\nmodule.exports = function enchilada(opt) {\n\n    // if just a path is passed in, treat as public file dir\n    if (typeof opt === 'string') {\n        opt = { src: opt };\n    }\n\n    var pubdir = opt.src;\n    var routes = opt.routes || {};\n    var bundles = {};\n\n    var compress = false || opt.compress;\n    var cache = {}; // cache of sourcefiles\n    var generating = {};\n    var maps = {}; // cache of sourcemaps\n    var debug_opt = false || opt.debug;\n\n    var watch = !opt.cache;\n    var watchCallback = opt.watchCallback;\n\n    function makeBundle(options) {\n        var bundle = browserify(options);\n        if (opt.transforms) {\n            opt.transforms.forEach(function(transform) {\n                bundle.transform(transform)\n            });\n        }\n        if (opt.externals) {\n            opt.externals.forEach(function(external) {\n                bundle.external(external);\n            });\n        }\n        return bundle;\n    }\n\n    // TODO(shtylman) externs that use other externs?\n    Object.keys(routes).map(function(id) {\n        var name = routes[id];\n\n        debug('route: %s -> %s', id, name);\n\n        var bundle = makeBundle({ exposeAll: true });\n        bundle.require(name, { entry: true, expose: name, basedir: pubdir });\n        return bundles[id] = bundle;\n    });\n\n    return function(req, res, next) {\n        var req_path = req.path || url.parse(req.url).path;\n\n        if (/.map.json$/.test(req_path) && maps[req_path]) {\n            return res.json(maps[req_path]);\n        }\n\n        // if no extension, then don't process\n        // handles case of directories and other random urls\n        if (!path.extname(req_path)) {\n            return notFound();\n        }\n        else if (mime.lookup(req_path) !== 'application/javascript') {\n            return notFound();\n        }\n\n        // check cache\n        var cached = cache[req_path];\n        if (cached) {\n            return sendResponse(null, cached);\n        }\n\n        // check for bundle\n        var bundle = bundles[req_path];\n        if (bundle) {\n            return safeGenerate(bundle, sendResponse);\n        }\n\n        var local_file = path.normalize(path.join(pubdir, req_path));\n\n        // check for malicious attempts to access outside of pubdir\n        if (local_file.indexOf(pubdir) !== 0) {\n            return notFound();\n        }\n\n        // lookup in filesystem\n        fs.exists(local_file, function(exists) {\n            if (!exists) {\n                return notFound();\n            }\n\n            var bundle = makeBundle(local_file);\n            Object.keys(bundles).forEach(function(id) {\n                bundle.external(bundles[id]);\n            });\n            safeGenerate(bundle, sendResponse);\n        });\n\n        // safeGenerate joins multiple simultaneous generates per req_path\n        function safeGenerate(bundle, callback) {\n            var ready = generating[req_path];\n            if (!ready) {\n                ready = generating[req_path] = Ready();\n                generate(bundle, function(error, src) {\n                    delete generating[req_path];\n                    ready.signal(error, src);\n                });\n            }\n            ready(callback);\n        }\n        function generate(bundle, callback) {\n            var dependencies = {};\n\n            // typically SyntaxError\n            var otherError;\n            bundle.once('error', function(err) { otherError = err; });\n\n            var collect_deps = function(file) {\n                dependencies[file] = true;\n            };\n\n            if (watch) {\n                bundle.on('file', collect_deps);\n            }\n\n            bundle.bundle({ debug: debug_opt }, function(err, src) {\n                bundle.removeListener('file', collect_deps);\n\n                if (watch) {\n                    watchFiles(bundle, dependencies, req_path);\n                }\n                if (err) {\n                    return callback(err);\n                }\n                if (otherError) {\n                    return callback(otherError);\n                }\n\n                var srcmap = undefined;\n                var map_path = undefined;\n                if (debug_opt) {\n                    // output sourcemap\n                    srcmap = convert.fromComment(src);\n                    src = convert.removeComments(src);\n                    srcmap.setProperty('file', req_path);\n                    map_path = req_path.replace(/.js$/, '.map.json');\n                }\n\n                if (compress) {\n                    var ugly_opt = {};\n                    if (typeof compress == 'object') {\n                        ugly_opt = compress\n                    }\n\n                    ugly_opt.fromString = true;\n\n                    if (srcmap) {\n                        ugly_opt.inSourceMap = srcmap.toObject(),\n                        ugly_opt.outSourceMap = req_path\n                    }\n\n                    var result = uglifyjs.minify(src, ugly_opt);\n\n                    src = result.code;\n\n                    if (srcmap) {\n                        // prepare new sourcemap\n                        // we need to get the sources from bundled sources\n                        // uglify does not carry those through\n                        var srcs = srcmap.getProperty('sourcesContent');\n                        srcmap = convert.fromJSON(result.map);\n                        srcmap.setProperty('sourcesContent', srcs);\n                    }\n                }\n\n                if (srcmap) {\n                    src += '//# sourceMappingURL=' + path.basename(map_path);\n                    maps[map_path] = srcmap.toObject();\n                }\n\n                cache[req_path] = src;\n\n                callback(null, src);\n            });\n        }\n\n        function notFound() {\n            if (typeof next === 'function') {\n                return next();\n            }\n\n            res.setHeader('Content-Type', 'text/plain');\n            respond(404, 'Not Found');\n        }\n\n        function sendResponse(err, src) {\n            if (err) {\n                return sendError(err);\n            }\n\n            res.setHeader('Content-Type', 'application/javascript');\n\n            var etag = crypto.createHash('md5').update(src).digest('hex').slice(0, 6);\n            if (req.get && (etag === req.get('If-None-Match'))) {\n                respond(304, '');\n            }\n            else {\n                res.setHeader('ETag', etag);\n                res.setHeader('Vary', 'Accept-Encoding');\n                respond(200, src);\n            }\n        }\n\n        function sendError(err) {\n            if (typeof next === 'function') {\n                return next(err);\n            }\n\n            res.setHeader('Content-Type', 'text/plain');\n            respond(500, err.toString());\n        }\n\n        function respond(code, data) {\n            data = new Buffer(data);\n            res.setHeader('Content-Length', data.length);\n            res.writeHeader(code);\n            res.end(data);\n        }\n\n        function watchFiles(bundle, dependencies, path) {\n            // close any current watchers to avoid double watching\n            // this happens when we are already bundling (not yet done)\n            // and a file change (or request) triggers a new build\n            // leading to generate being called again (which will add watchers)\n            // but our first build will also add watchers since nothing will stop it\n            // here we remove any watchers first\n            var watcher = filewatcher();\n            watcher.once('change', function(file) {\n                debug(\"rebuilding %s due to change in %s\", req_path, file);\n                watcher.removeAll();\n                delete cache[path];\n                safeGenerate(bundle, function(error) {\n                    if (watchCallback) {\n                        watchCallback(error, path);\n                    }\n                });\n            });\n            watcher.once('fallback', function(limit) {\n                debug('Ran out of file handles after watching %s files.', limit);\n                debug('Falling back to polling which uses more CPU.');\n                debug('Run ulimit -n 10000 to increase the limit for open files.');\n            });\n            Object.keys(dependencies).map(function(filename) {\n                watcher.add(filename);\n            });\n        }\n    };\n};\n\n"}